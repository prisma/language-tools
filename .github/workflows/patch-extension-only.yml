name: Check for Push to Patch Branch + Insider Release

on:
  push

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  ENVIRONMENT: ${{ secrets.ENVIRONMENT }}

jobs:
  setup:
    name: Check for Updates
    runs-on: ubuntu-latest
    if: endsWith(github.ref, '.x')
    outputs:
      patch-version: ${{ steps.bump.outputs.patch-version }}
      lsp-not-published: ${{ steps.check_lsp_version.outputs.lsp-not-published }}
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: npm install
      - name: Bump versions
        if: ${{ steps.check_for_updates.outputs.version }}
        id: bump
        run: npm run vsce:bump "patch-dev" "toBeCreated"
      - name: Check existing LSP version
        id: check_lsp_version
        run: npm run check:lsp ${{ steps.bump.outputs.patch-version }}
  
  test-lsp:
    name: Test LSP
    needs: setup
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    if: ${{ needs.setup.outputs.lsp-not-published }}
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: npm install
      - name: Bump versions
        # Jobs do not share workspace --> bump versions again
        if: ${{ needs.setup.outputs.patch-version }}
        run: npm run vsce:bump "patch-dev" "toBeCreated"
      - name: Install Dependencies in LSP
        run: cd packages/language-server && npm install
      - name: Compile LSP
        run: cd packages/language-server && npm run build
      - name: LSP unit tests
        run: cd packages/language-server && npm test

  publish-lsp:
    name: Publish LSP to npm
    needs: [setup, test-lsp]
    runs-on: ubuntu-latest
    if: ${{ needs.setup.outputs.lsp-not-published }}
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: npm install
      - name: Bump versions
        # Jobs do not share workspace --> bump versions again
        if: ${{ needs.setup.outputs.new_updates }}
        run: npm run vsce:bump "patch-dev"  "toBeCreated"
      - name: Install Dependencies in LSP
        run: cd packages/language-server && npm install
      - name: Compile LSP
        run: cd packages/language-server && npm run build
      - name: Publish LSP to npm
        # Setup .npmrc file to publish to npm
        uses: actions/setup-node@v1
        with: 
          node-version: '12.x'
          registry-url: 'https://registry.npmjs.org'
      - run: cd packages/language-server && npm publish --tag patch-dev  --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN}}

  test-extension:
    name: Extension integration tests
    needs: [setup, test-lsp, publish-lsp]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps: 
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: npm install
      - name: Bump versions
        # Jobs do not share workspace --> bump versions again
        if: ${{ needs.setup.outputs.new_updates }}
        run: npm run vsce:bump "patch-dev"  "toBeCreated"
      - name: Install Dependencies
        run: npm install
      - name: Compile
        run: npm run compile
      - name: Headless e2e tests
        uses: GabrielBB/xvfb-action@v1.0
        with:
          run: npm run test

  publish: 
    name: Publish to Marketplace
    runs-on: ubuntu-latest
    needs: [setup, test-lsp, publish-lsp, test-extension]
    if: ${{ needs.setup.outputs.version }}
    env: 
      AZURE_DEVOPS_PERSONAL_ACCESS_TOKEN: ${{ secrets.AZURE_DEVOPS_PERSONAL_ACCESS_TOKEN }}
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      SLACK_CHANNEL: feed-vscode
      SLACK_USERNAME: vscode-actions
      SLACK_ICON_EMOJI: ":ship:"
      SLACK_MESSAGE: ${{ needs.setup.outputs.patch-version }}
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: npm install
      - name: Bump versions
        # Jobs do not share workspace --> bump versions again
        if: ${{ needs.setup.outputs.new_updates }}
        run: npm run vsce:bump "patch-dev"  "toBeCreated"
      - name: Install Dependencies
        run: npm install
      - name: Compile
        run: npm run compile
      - name: Publish Extension as Patch
        if: ${{ needs.setup.outputs.new_updates }}
        run: npm run vsce:publish "patch-dev" ${{ needs.setup.outputs.patch-version }}
      - name: Slack Notification on Failure
        if: ${{ needs.setup.result == 'failure' || needs.test-lsp.result == 'failure' || needs.publish-lsp.result == 'failure' || needs.test-extension.result == 'failure' || failure() }}
        uses: rtCamp/action-slack-notify@v2.0.2
        env:  
          SLACK_TITLE: "Publishing insider patch failed :x:"
          SLACK_COLOR: '#FF0000'

      - name: Slack Notification on Success
        if: ${{ needs.test-extension.result == 'success' && success() && needs.setup.outputs.patch-version }}
        uses: rtCamp/action-slack-notify@v2.0.2
        env:  
          SLACK_TITLE: "Published insider patch :white_check_mark:"
          SLACK_COLOR: '#008000'
