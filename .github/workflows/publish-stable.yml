name: Stable Check for Update + Automated Publish

on:
  schedule:
    - cron: '*/5 * * * *'

env:
  AZURE_DEVOPS_PERSONAL_ACCESS_TOKEN: ${{ secrets.AZURE_DEVOPS_PERSONAL_ACCESS_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  ENVIRONMENT: ${{ secrets.ENVIRONMENT }}

jobs:
  publish:
    name: Publish
    runs-on: ubuntu-latest
    if: endsWith(github.ref, '/master')
    outputs:
      version: ${{ steps.bump_versions.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: npm install
      - name: Check for Update
        run: npm run vsce:check "latest" 
        id: check_for_updates
      - name: Bump versions
        if: ${{ steps.check_for_updates.outputs.new_updates }}
        run: npm run vsce:bump "latest" 
        id: bump_versions
      - name: Check existing LSP version
        if: ${{ steps.check_for_updates.outputs.new_updates }}
        id: check_lsp_version
        run: npm run check:lsp ${{ steps.bump_versions.outputs.version }}
      - name: Install Dependencies in LSP
        if: ${{ steps.check_lsp_version.outputs.lsp-not-published }}
        run: cd packages/language-server && npm install
      - name: Compile LSP
        if: ${{ steps.check_lsp_version.outputs.lsp-not-published }}
        run: cd packages/language-server && npm run build
      - name: LSP unit tests
        if: ${{ steps.check_lsp_version.outputs.lsp-not-published }}
        run: cd packages/language-server && npm test
      - name: Remove binaries in LSP
        if: ${{ steps.check_lsp_version.outputs.lsp-not-published }}
        run: rm -rf packages/language-server/dist/src/prisma-fmt*
      - name: Publish LSP to npm
        if: ${{ steps.check_lsp_version.outputs.lsp-not-published }}
        # Setup .npmrc file to publish to npm
        uses: actions/setup-node@v1
        with: 
          node-version: '12.x'
          registry-url: 'https://registry.npmjs.org'
      - run: cd packages/language-server && npm publish --access public
        if: ${{ steps.check_lsp_version.outputs.lsp-not-published }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN}}
      - name: Install Dependencies
        run: npm install
      - name: Compile
        run: npm run compile
      - name: Headless e2e tests
        if: ${{ steps.check_for_updates.outputs.new_updates }}
        uses: GabrielBB/xvfb-action@v1.0
        with:
          run: npm run test
      - name: Remove binaries
        if: ${{ steps.check_for_updates.outputs.new_updates }}
        run: rm -rf packages/vscode/node_modules/@prisma/language-server/dist/src/prisma-fmt*
      - name: Publish Extension as Patch
        if: ${{ steps.check_for_updates.outputs.new_updates }}
        run: npm run vsce:publish "latest"

  slack: 
    name: Slack Notification
    runs-on: ubuntu-latest
    needs: publish
    if: always()
    env: 
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      SLACK_CHANNEL: feed-vscode
      SLACK_USERNAME: vscode-actions
      SLACK_ICON_EMOJI: ":ship:"
      SLACK_MESSAGE: ${{ needs.publish.outputs.version }}
    if: endsWith(github.ref, '/master')
    steps:
      - uses: actions/checkout@v2
      - name: Slack Notification on Failure
        if: ${{ needs.publish.result == 'failure' }}
        uses: rtCamp/action-slack-notify@v2.0.2
        env:  
          SLACK_TITLE: "Publishing stable failed :x:"
          SLACK_COLOR: '#FF0000'

      - name: Slack Notification on Success
        if: ${{ needs.publish.result == 'success' && needs.publish.outputs.version }}
        uses: rtCamp/action-slack-notify@v2.0.2
        env:  
          SLACK_TITLE: "Published stable :white_check_mark:"
          SLACK_COLOR: '#008000'
      