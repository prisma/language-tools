/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/connections/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete database connection string
         * @description Deletes the database connection string with the given ID.
         */
        delete: operations["deleteV1ConnectionsById"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/databases/{databaseId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get database
         * @description Returns the database with the given ID.
         */
        get: operations["getV1DatabasesByDatabaseId"];
        put?: never;
        post?: never;
        /**
         * Delete database
         * @description Deletes the database with the given ID.
         */
        delete: operations["deleteV1DatabasesByDatabaseId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/databases/{databaseId}/connections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of database connections
         * @description Returns all connections for the given database.
         */
        get: operations["getV1DatabasesByDatabaseIdConnections"];
        put?: never;
        /**
         * Create database connection string
         * @description Creates a new connection string for the given database.
         */
        post: operations["postV1DatabasesByDatabaseIdConnections"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/databases/{databaseId}/backups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of backups
         * @description Returns backups for the specified database.
         */
        get: operations["getV1DatabasesByDatabaseIdBackups"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/databases/{databaseId}/usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get database usage metrics
         * @description Returns usage metrics for the specified database.
         */
        get: operations["getV1DatabasesByDatabaseIdUsage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of projects
         * @description Returns the list of projects the token has access to.
         */
        get: operations["getV1Projects"];
        put?: never;
        /**
         * Create project with a postgres database
         * @description Creates a new project with a postgres database.
         */
        post: operations["postV1Projects"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get project
         * @description Returns the project with the given ID.
         */
        get: operations["getV1ProjectsById"];
        put?: never;
        post?: never;
        /**
         * Delete project
         * @description Deletes the project with the given ID.
         */
        delete: operations["deleteV1ProjectsById"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{id}/transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Transfer project
         * @description Transfer the project with the given ID to the new owner's workspace
         */
        post: operations["postV1ProjectsByIdTransfer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/projects/{projectId}/databases": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of databases
         * @description Returns databases for the given project.
         */
        get: operations["getV1ProjectsByProjectIdDatabases"];
        put?: never;
        /**
         * Create database
         * @description Creates a new database for the given project.
         */
        post: operations["postV1ProjectsByProjectIdDatabases"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspaceId}/integrations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of integrations
         * @description Returns integrations for the given workspace.
         */
        get: operations["getV1WorkspacesByWorkspaceIdIntegrations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspaceId}/integrations/{clientId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Revoke integration tokens
         * @description Revokes the integration tokens with the given client ID.
         */
        delete: operations["deleteV1WorkspacesByWorkspaceIdIntegrationsByClientId"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/regions/postgres": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Prisma Postgres regions
         * @description Returns all available regions for Prisma Postgres.
         */
        get: operations["getV1RegionsPostgres"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/regions/accelerate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Prisma Accelerate regions
         * @description Returns all available regions for Prisma Accelerate.
         */
        get: operations["getV1RegionsAccelerate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of workspaces
         * @description Returns the list of workspaces the current token can access.
         */
        get: operations["getV1Workspaces"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    deleteV1ConnectionsById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deleted the database connection string. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing or invalid authorization token. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
            /** @description Database with the given ID was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
        };
    };
    getV1DatabasesByDatabaseId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                databaseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returned the database with the given ID. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            id: string;
                            /** @constant */
                            type: "database";
                            name: string;
                            /** @enum {string} */
                            status: "failure" | "provisioning" | "ready" | "recovering";
                            /** Format: date-time */
                            createdAt: string;
                            isDefault: boolean;
                            project: {
                                id: string;
                                name: string;
                            };
                            region: {
                                id: string;
                                name: string;
                            } | null;
                        };
                    };
                };
            };
            /** @description Missing or invalid authorization token. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
            /** @description Database with the given ID was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
        };
    };
    deleteV1DatabasesByDatabaseId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                databaseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deleted the database successfully. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing or invalid authorization token. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
            /** @description Cannot delete the default environment. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
            /** @description Database with the given ID was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
        };
    };
    getV1DatabasesByDatabaseIdConnections: {
        parameters: {
            query?: {
                cursor?: string | null;
                limit?: number;
            };
            header?: never;
            path: {
                databaseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returned all connections for the given database. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            id: string;
                            /** @constant */
                            type: "connection";
                            name: string;
                            /** Format: date-time */
                            createdAt: string;
                            database: {
                                id: string;
                                name: string;
                            };
                        }[];
                        pagination: {
                            nextCursor: string | null;
                            hasMore: boolean;
                        };
                    };
                };
            };
            /** @description Missing or invalid authorization token. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
        };
    };
    postV1DatabasesByDatabaseIdConnections: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                databaseId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    name: string;
                };
            };
        };
        responses: {
            /** @description Created a new connection string for the database. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            id: string;
                            /** @constant */
                            type: "connection";
                            name: string;
                            /** Format: date-time */
                            createdAt: string;
                            connectionString: string;
                            database: {
                                id: string;
                                name: string;
                            };
                            host: string | null;
                            pass: string | null;
                            user: string | null;
                        };
                    };
                };
            };
            /** @description Missing or invalid authorization token. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
            /** @description Database with the given ID was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
        };
    };
    getV1DatabasesByDatabaseIdBackups: {
        parameters: {
            query?: {
                limit?: number;
            };
            header?: never;
            path: {
                databaseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returned backups for the given database. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            id: string;
                            /** @enum {string} */
                            backupType: "full" | "incremental";
                            createdAt: string;
                            size?: number;
                            /** @enum {string} */
                            status: "running" | "completed" | "failed" | "unknown";
                            /** @constant */
                            type?: "backup";
                        }[];
                        meta: {
                            backupRetentionDays: number;
                        };
                        pagination: {
                            hasMore: boolean;
                            limit: number | null;
                        };
                    };
                };
            };
            /** @description Missing or invalid authorization token. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
            /** @description Database with the given ID was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
            /** @description Remote database backups are not supported */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
        };
    };
    getV1DatabasesByDatabaseIdUsage: {
        parameters: {
            query?: {
                startDate?: string;
                endDate?: string;
            };
            header?: never;
            path: {
                databaseId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returned usage metrics for the given database. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        period: {
                            /** Format: date-time */
                            start: string;
                            /** Format: date-time */
                            end: string;
                        };
                        metrics: {
                            operations: {
                                used: number;
                                /** @constant */
                                unit: "ops";
                            };
                            storage: {
                                used: number;
                                /** @constant */
                                unit: "GiB";
                            };
                        };
                        /** Format: date-time */
                        generatedAt: string;
                    };
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
            /** @description Missing or invalid authorization token. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
            /** @description Database with the given ID was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
            /** @description Error occurred while fetching metrics */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
        };
    };
    getV1Projects: {
        parameters: {
            query?: {
                cursor?: string | null;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the list of projects. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            id: string;
                            /** @constant */
                            type: "project";
                            name: string;
                            /** Format: date-time */
                            createdAt: string;
                            workspace: {
                                id: string;
                                name: string;
                            };
                        }[];
                        pagination: {
                            nextCursor: string | null;
                            hasMore: boolean;
                        };
                    };
                };
            };
            /** @description Missing or invalid authorization token. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
        };
    };
    postV1Projects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @default true */
                    createDatabase?: boolean;
                    name?: string;
                    /** @enum {string} */
                    region?: "us-east-1" | "us-west-1" | "eu-west-3" | "eu-central-1" | "ap-northeast-1" | "ap-southeast-1";
                };
            };
        };
        responses: {
            /** @description New project created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            id: string;
                            /** @constant */
                            type: "project";
                            name: string;
                            /** Format: date-time */
                            createdAt: string;
                            workspace: {
                                id: string;
                                name: string;
                            };
                            database: {
                                id: string;
                                /** @constant */
                                type: "database";
                                name: string;
                                /** @enum {string} */
                                status: "provisioning" | "ready";
                                /** Format: date-time */
                                createdAt: string;
                                isDefault: boolean;
                                region: {
                                    id: string;
                                    name: string;
                                };
                                apiKeys: {
                                    id: string;
                                    /** @constant */
                                    type: "connection";
                                    name: string;
                                    /** Format: date-time */
                                    createdAt: string;
                                    connectionString: string;
                                }[];
                                connectionString: string | null;
                                directConnection: {
                                    host: string;
                                    pass: string;
                                    user: string;
                                } | null;
                            } | null;
                        };
                    };
                };
            };
            /** @description Missing or invalid authorization token. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
        };
    };
    getV1ProjectsById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Project retrieved. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            id: string;
                            /** @constant */
                            type: "project";
                            name: string;
                            /** Format: date-time */
                            createdAt: string;
                            workspace: {
                                id: string;
                                name: string;
                            };
                        };
                    };
                };
            };
            /** @description Missing or invalid authorization token. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
            /** @description Project with the specified ID was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
        };
    };
    deleteV1ProjectsById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Project deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Project cannot be deleted due to existing dependencies. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
            /** @description Project with the specified ID was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
        };
    };
    postV1ProjectsByIdTransfer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    recipientAccessToken: string;
                };
            };
        };
        responses: {
            /** @description Project transferred */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing or invalid authorization token. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
            /** @description Project with the given ID was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
        };
    };
    getV1ProjectsByProjectIdDatabases: {
        parameters: {
            query?: {
                cursor?: string | null;
                limit?: number;
            };
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returned the databases for the given project ID. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            id: string;
                            /** @constant */
                            type: "database";
                            name: string;
                            /** @enum {string} */
                            status: "failure" | "provisioning" | "ready" | "recovering";
                            /** Format: date-time */
                            createdAt: string;
                            isDefault: boolean;
                            project: {
                                id: string;
                                name: string;
                            };
                            region: {
                                id: string;
                                name: string;
                            } | null;
                        }[];
                        pagination: {
                            nextCursor: string | null;
                            hasMore: boolean;
                        };
                    };
                };
            };
            /** @description Missing or invalid authorization token. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
            /** @description Project with the given ID was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
        };
    };
    postV1ProjectsByProjectIdDatabases: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @enum {string} */
                    region?: "us-east-1" | "us-west-1" | "eu-west-3" | "eu-central-1" | "ap-northeast-1" | "ap-southeast-1";
                    name?: string;
                    /** @default false */
                    isDefault?: boolean;
                    fromDatabase?: {
                        id: string;
                        backupId?: string;
                    };
                };
            };
        };
        responses: {
            /** @description Created a new database for the project. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            id: string;
                            /** @constant */
                            type: "database";
                            name: string;
                            /** @enum {string} */
                            status: "provisioning" | "ready";
                            /** Format: date-time */
                            createdAt: string;
                            isDefault: boolean;
                            project: {
                                id: string;
                                name: string;
                            };
                            region: {
                                id: string;
                                name: string;
                            };
                            apiKeys: {
                                id: string;
                                /** @constant */
                                type: "connection";
                                name: string;
                                /** Format: date-time */
                                createdAt: string;
                                connectionString: string;
                            }[];
                            connectionString: string | null;
                            directConnection: {
                                host: string;
                                pass: string;
                                user: string;
                            } | null;
                        };
                    };
                };
            };
            /** @description The request is invalid due to missing or invalid parameters. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
            /** @description Missing or invalid authorization token. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
            /** @description Project does not belong to the service token’s workspace. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
        };
    };
    getV1WorkspacesByWorkspaceIdIntegrations: {
        parameters: {
            query?: {
                cursor?: string | null;
                limit?: number;
            };
            header?: never;
            path: {
                workspaceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returned the integrations for the given workspace ID. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            id: string;
                            /** Format: date-time */
                            createdAt: string;
                            scopes: string[];
                            client: {
                                id: string;
                                name: string;
                                /** Format: date-time */
                                createdAt: string;
                            };
                            createdByUser: {
                                id: string;
                                email: string;
                                displayName: string | null;
                            };
                        }[];
                        pagination: {
                            nextCursor: string | null;
                            hasMore: boolean;
                        };
                    };
                };
            };
            /** @description Missing or invalid authorization token. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
            /** @description Workspace with the given ID was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
        };
    };
    deleteV1WorkspacesByWorkspaceIdIntegrationsByClientId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clientId: string;
                workspaceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Revoked the integration tokens. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing or invalid authorization token. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
            /** @description Integration with the given client ID was not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
        };
    };
    getV1RegionsPostgres: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns all available regions for Prisma Postgres. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            id: string;
                            /** @constant */
                            type: "region";
                            name: string;
                            /** @enum {string} */
                            status: "available" | "unavailable";
                        }[];
                    };
                };
            };
            /** @description Missing or invalid authorization token. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
        };
    };
    getV1RegionsAccelerate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns all available regions for Prisma Accelerate. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            id: string;
                            /** @constant */
                            type: "region";
                            name: string;
                        }[];
                    };
                };
            };
            /** @description Missing or invalid authorization token. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
        };
    };
    getV1Workspaces: {
        parameters: {
            query?: {
                cursor?: string | null;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the list of workspaces the current token can access. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            id: string;
                            /** @constant */
                            type: "workspace";
                            name: string;
                            /** Format: date-time */
                            createdAt: string;
                        }[];
                        pagination: {
                            nextCursor: string | null;
                            hasMore: boolean;
                        };
                    };
                };
            };
            /** @description Missing or invalid authorization token. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error: {
                            code: string;
                            message: string;
                        };
                    };
                };
            };
        };
    };
}
