/* tslint:disable */
/* eslint-disable */
/**
 * Prisma Management API
 * Development documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface DeleteProjectsById400Response
 */
export interface DeleteProjectsById400Response {
    /**
     * 
     * @type {DeleteProjectsById400ResponseError}
     * @memberof DeleteProjectsById400Response
     */
    'error': DeleteProjectsById400ResponseError;
}
/**
 * 
 * @export
 * @interface DeleteProjectsById400ResponseError
 */
export interface DeleteProjectsById400ResponseError {
    /**
     * 
     * @type {string}
     * @memberof DeleteProjectsById400ResponseError
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof DeleteProjectsById400ResponseError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface DeleteProjectsByProjectIdDatabasesByDatabaseId200Response
 */
export interface DeleteProjectsByProjectIdDatabasesByDatabaseId200Response {
    /**
     * 
     * @type {string}
     * @memberof DeleteProjectsByProjectIdDatabasesByDatabaseId200Response
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface GetProjects200Response
 */
export interface GetProjects200Response {
    /**
     * 
     * @type {Array<GetProjects200ResponseDataInner>}
     * @memberof GetProjects200Response
     */
    'data': Array<GetProjects200ResponseDataInner>;
    /**
     * 
     * @type {GetProjects200ResponsePagination}
     * @memberof GetProjects200Response
     */
    'pagination': GetProjects200ResponsePagination;
}
/**
 * 
 * @export
 * @interface GetProjects200ResponseDataInner
 */
export interface GetProjects200ResponseDataInner {
    /**
     * 
     * @type {string}
     * @memberof GetProjects200ResponseDataInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof GetProjects200ResponseDataInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GetProjects200ResponseDataInner
     */
    'name': string;
    /**
     * 
     * @type {Array<GetProjects200ResponseDataInnerDatabasesInner>}
     * @memberof GetProjects200ResponseDataInner
     */
    'databases': Array<GetProjects200ResponseDataInnerDatabasesInner>;
}
/**
 * 
 * @export
 * @interface GetProjects200ResponseDataInnerDatabasesInner
 */
export interface GetProjects200ResponseDataInnerDatabasesInner {
    /**
     * 
     * @type {string}
     * @memberof GetProjects200ResponseDataInnerDatabasesInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GetProjects200ResponseDataInnerDatabasesInner
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface GetProjects200ResponsePagination
 */
export interface GetProjects200ResponsePagination {
    /**
     * Next cursor to continue pagination
     * @type {string}
     * @memberof GetProjects200ResponsePagination
     */
    'nextCursor': string | null;
    /**
     * Whether there are more items to paginate
     * @type {boolean}
     * @memberof GetProjects200ResponsePagination
     */
    'hasMore': boolean;
}
/**
 * 
 * @export
 * @interface GetProjects401Response
 */
export interface GetProjects401Response {
    /**
     * 
     * @type {string}
     * @memberof GetProjects401Response
     */
    'error': GetProjects401ResponseErrorEnum;
    /**
     * 
     * @type {string}
     * @memberof GetProjects401Response
     */
    'errorDescription': string;
}

export const GetProjects401ResponseErrorEnum = {
    Unauthorized: 'unauthorized'
} as const;

export type GetProjects401ResponseErrorEnum = typeof GetProjects401ResponseErrorEnum[keyof typeof GetProjects401ResponseErrorEnum];

/**
 * 
 * @export
 * @interface GetProjectsByIdDatabases200Response
 */
export interface GetProjectsByIdDatabases200Response {
    /**
     * 
     * @type {Array<GetProjectsByIdDatabases200ResponseDataInner>}
     * @memberof GetProjectsByIdDatabases200Response
     */
    'data': Array<GetProjectsByIdDatabases200ResponseDataInner>;
    /**
     * 
     * @type {GetProjects200ResponsePagination}
     * @memberof GetProjectsByIdDatabases200Response
     */
    'pagination': GetProjects200ResponsePagination;
}
/**
 * 
 * @export
 * @interface GetProjectsByIdDatabases200ResponseDataInner
 */
export interface GetProjectsByIdDatabases200ResponseDataInner {
    /**
     * 
     * @type {string}
     * @memberof GetProjectsByIdDatabases200ResponseDataInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof GetProjectsByIdDatabases200ResponseDataInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GetProjectsByIdDatabases200ResponseDataInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GetProjectsByIdDatabases200ResponseDataInner
     */
    'region': string | null;
}
/**
 * 
 * @export
 * @interface PostProjectsByIdDatabases201Response
 */
export interface PostProjectsByIdDatabases201Response {
    /**
     * 
     * @type {string}
     * @memberof PostProjectsByIdDatabases201Response
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof PostProjectsByIdDatabases201Response
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PostProjectsByIdDatabases201Response
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PostProjectsByIdDatabases201Response
     */
    'region': string;
    /**
     * 
     * @type {string}
     * @memberof PostProjectsByIdDatabases201Response
     */
    'connectionString': string;
    /**
     * 
     * @type {string}
     * @memberof PostProjectsByIdDatabases201Response
     */
    'status': string;
    /**
     * 
     * @type {Array<PostProjectsByIdDatabases201ResponseApiKeysInner>}
     * @memberof PostProjectsByIdDatabases201Response
     */
    'apiKeys': Array<PostProjectsByIdDatabases201ResponseApiKeysInner>;
}
/**
 * 
 * @export
 * @interface PostProjectsByIdDatabases201ResponseApiKeysInner
 */
export interface PostProjectsByIdDatabases201ResponseApiKeysInner {
    /**
     * 
     * @type {string}
     * @memberof PostProjectsByIdDatabases201ResponseApiKeysInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PostProjectsByIdDatabases201ResponseApiKeysInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PostProjectsByIdDatabases201ResponseApiKeysInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof PostProjectsByIdDatabases201ResponseApiKeysInner
     */
    'connectionString': string;
}
/**
 * 
 * @export
 * @interface PostProjectsByIdTransferRequest
 */
export interface PostProjectsByIdTransferRequest {
    /**
     * 
     * @type {string}
     * @memberof PostProjectsByIdTransferRequest
     */
    'recipientAccessToken': string;
}
/**
 * 
 * @export
 * @interface PostProjectsByProjectIdDatabasesByDatabaseIdConnectionsRequest
 */
export interface PostProjectsByProjectIdDatabasesByDatabaseIdConnectionsRequest {
    /**
     * 
     * @type {string}
     * @memberof PostProjectsByProjectIdDatabasesByDatabaseIdConnectionsRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface PostProjectsRequest
 */
export interface PostProjectsRequest {
    /**
     * 
     * @type {string}
     * @memberof PostProjectsRequest
     */
    'region'?: PostProjectsRequestRegionEnum;
    /**
     * 
     * @type {string}
     * @memberof PostProjectsRequest
     */
    'name'?: string;
}

export const PostProjectsRequestRegionEnum = {
    UsEast1: 'us-east-1',
    EuWest3: 'eu-west-3',
    ApNortheast1: 'ap-northeast-1'
} as const;

export type PostProjectsRequestRegionEnum = typeof PostProjectsRequestRegionEnum[keyof typeof PostProjectsRequestRegionEnum];


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes a project
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectsById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteProjectsById', 'id', id)
            const localVarPath = `/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a database
         * @param {string} projectId 
         * @param {string} databaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectsByProjectIdDatabasesByDatabaseId: async (projectId: string, databaseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteProjectsByProjectIdDatabasesByDatabaseId', 'projectId', projectId)
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('deleteProjectsByProjectIdDatabasesByDatabaseId', 'databaseId', databaseId)
            const localVarPath = `/projects/{projectId}/databases/{databaseId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a database connection string.
         * @param {string} projectId 
         * @param {string} databaseId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectsByProjectIdDatabasesByDatabaseIdConnectionsById: async (projectId: string, databaseId: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteProjectsByProjectIdDatabasesByDatabaseIdConnectionsById', 'projectId', projectId)
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('deleteProjectsByProjectIdDatabasesByDatabaseIdConnectionsById', 'databaseId', databaseId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteProjectsByProjectIdDatabasesByDatabaseIdConnectionsById', 'id', id)
            const localVarPath = `/projects/{projectId}/databases/{databaseId}/connections/{id}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all projects
         * @param {string | null} [cursor] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjects: async (cursor?: string | null, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a project
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectsById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProjectsById', 'id', id)
            const localVarPath = `/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all databases for a project
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectsByIdDatabases: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProjectsByIdDatabases', 'id', id)
            const localVarPath = `/projects/{id}/databases`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a database
         * @param {string} projectId 
         * @param {string} databaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectsByProjectIdDatabasesByDatabaseId: async (projectId: string, databaseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectsByProjectIdDatabasesByDatabaseId', 'projectId', projectId)
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('getProjectsByProjectIdDatabasesByDatabaseId', 'databaseId', databaseId)
            const localVarPath = `/projects/{projectId}/databases/{databaseId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all database connections
         * @param {string} projectId 
         * @param {string} databaseId 
         * @param {string | null} [cursor] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectsByProjectIdDatabasesByDatabaseIdConnections: async (projectId: string, databaseId: string, cursor?: string | null, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectsByProjectIdDatabasesByDatabaseIdConnections', 'projectId', projectId)
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('getProjectsByProjectIdDatabasesByDatabaseIdConnections', 'databaseId', databaseId)
            const localVarPath = `/projects/{projectId}/databases/{databaseId}/connections`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new project
         * @param {PostProjectsRequest} [postProjectsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProjects: async (postProjectsRequest?: PostProjectsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postProjectsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new database for a project
         * @param {string} id 
         * @param {PostProjectsRequest} [postProjectsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProjectsByIdDatabases: async (id: string, postProjectsRequest?: PostProjectsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postProjectsByIdDatabases', 'id', id)
            const localVarPath = `/projects/{id}/databases`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postProjectsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Transfer a project to a new owner\'s workspace
         * @param {string} id 
         * @param {PostProjectsByIdTransferRequest} [postProjectsByIdTransferRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProjectsByIdTransfer: async (id: string, postProjectsByIdTransferRequest?: PostProjectsByIdTransferRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postProjectsByIdTransfer', 'id', id)
            const localVarPath = `/projects/{id}/transfer`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postProjectsByIdTransferRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new database connection string.
         * @param {string} projectId 
         * @param {string} databaseId 
         * @param {PostProjectsByProjectIdDatabasesByDatabaseIdConnectionsRequest} [postProjectsByProjectIdDatabasesByDatabaseIdConnectionsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProjectsByProjectIdDatabasesByDatabaseIdConnections: async (projectId: string, databaseId: string, postProjectsByProjectIdDatabasesByDatabaseIdConnectionsRequest?: PostProjectsByProjectIdDatabasesByDatabaseIdConnectionsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('postProjectsByProjectIdDatabasesByDatabaseIdConnections', 'projectId', projectId)
            // verify required parameter 'databaseId' is not null or undefined
            assertParamExists('postProjectsByProjectIdDatabasesByDatabaseIdConnections', 'databaseId', databaseId)
            const localVarPath = `/projects/{projectId}/databases/{databaseId}/connections`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"databaseId"}}`, encodeURIComponent(String(databaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postProjectsByProjectIdDatabasesByDatabaseIdConnectionsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Deletes a project
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProjectsById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProjectsById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteProjectsById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a database
         * @param {string} projectId 
         * @param {string} databaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProjectsByProjectIdDatabasesByDatabaseId(projectId: string, databaseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteProjectsByProjectIdDatabasesByDatabaseId200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProjectsByProjectIdDatabasesByDatabaseId(projectId, databaseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteProjectsByProjectIdDatabasesByDatabaseId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes a database connection string.
         * @param {string} projectId 
         * @param {string} databaseId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProjectsByProjectIdDatabasesByDatabaseIdConnectionsById(projectId: string, databaseId: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProjectsByProjectIdDatabasesByDatabaseIdConnectionsById(projectId, databaseId, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteProjectsByProjectIdDatabasesByDatabaseIdConnectionsById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve all projects
         * @param {string | null} [cursor] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjects(cursor?: string | null, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProjects200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjects(cursor, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getProjects']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a project
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectsById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProjects200ResponseDataInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectsById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getProjectsById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve all databases for a project
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectsByIdDatabases(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProjectsByIdDatabases200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectsByIdDatabases(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getProjectsByIdDatabases']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a database
         * @param {string} projectId 
         * @param {string} databaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectsByProjectIdDatabasesByDatabaseId(projectId: string, databaseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProjectsByIdDatabases200ResponseDataInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectsByProjectIdDatabasesByDatabaseId(projectId, databaseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getProjectsByProjectIdDatabasesByDatabaseId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve all database connections
         * @param {string} projectId 
         * @param {string} databaseId 
         * @param {string | null} [cursor] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectsByProjectIdDatabasesByDatabaseIdConnections(projectId: string, databaseId: string, cursor?: string | null, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectsByProjectIdDatabasesByDatabaseIdConnections(projectId, databaseId, cursor, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getProjectsByProjectIdDatabasesByDatabaseIdConnections']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new project
         * @param {PostProjectsRequest} [postProjectsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postProjects(postProjectsRequest?: PostProjectsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProjects200ResponseDataInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postProjects(postProjectsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postProjects']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new database for a project
         * @param {string} id 
         * @param {PostProjectsRequest} [postProjectsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postProjectsByIdDatabases(id: string, postProjectsRequest?: PostProjectsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostProjectsByIdDatabases201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postProjectsByIdDatabases(id, postProjectsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postProjectsByIdDatabases']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Transfer a project to a new owner\'s workspace
         * @param {string} id 
         * @param {PostProjectsByIdTransferRequest} [postProjectsByIdTransferRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postProjectsByIdTransfer(id: string, postProjectsByIdTransferRequest?: PostProjectsByIdTransferRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProjects200ResponseDataInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postProjectsByIdTransfer(id, postProjectsByIdTransferRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postProjectsByIdTransfer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new database connection string.
         * @param {string} projectId 
         * @param {string} databaseId 
         * @param {PostProjectsByProjectIdDatabasesByDatabaseIdConnectionsRequest} [postProjectsByProjectIdDatabasesByDatabaseIdConnectionsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postProjectsByProjectIdDatabasesByDatabaseIdConnections(projectId: string, databaseId: string, postProjectsByProjectIdDatabasesByDatabaseIdConnectionsRequest?: PostProjectsByProjectIdDatabasesByDatabaseIdConnectionsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostProjectsByIdDatabases201ResponseApiKeysInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postProjectsByProjectIdDatabasesByDatabaseIdConnections(projectId, databaseId, postProjectsByProjectIdDatabasesByDatabaseIdConnectionsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postProjectsByProjectIdDatabasesByDatabaseIdConnections']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Deletes a project
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectsById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteProjectsById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a database
         * @param {string} projectId 
         * @param {string} databaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectsByProjectIdDatabasesByDatabaseId(projectId: string, databaseId: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteProjectsByProjectIdDatabasesByDatabaseId200Response> {
            return localVarFp.deleteProjectsByProjectIdDatabasesByDatabaseId(projectId, databaseId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a database connection string.
         * @param {string} projectId 
         * @param {string} databaseId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectsByProjectIdDatabasesByDatabaseIdConnectionsById(projectId: string, databaseId: string, id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteProjectsByProjectIdDatabasesByDatabaseIdConnectionsById(projectId, databaseId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all projects
         * @param {string | null} [cursor] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjects(cursor?: string | null, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetProjects200Response> {
            return localVarFp.getProjects(cursor, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a project
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectsById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<GetProjects200ResponseDataInner> {
            return localVarFp.getProjectsById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all databases for a project
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectsByIdDatabases(id: string, options?: RawAxiosRequestConfig): AxiosPromise<GetProjectsByIdDatabases200Response> {
            return localVarFp.getProjectsByIdDatabases(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a database
         * @param {string} projectId 
         * @param {string} databaseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectsByProjectIdDatabasesByDatabaseId(projectId: string, databaseId: string, options?: RawAxiosRequestConfig): AxiosPromise<GetProjectsByIdDatabases200ResponseDataInner> {
            return localVarFp.getProjectsByProjectIdDatabasesByDatabaseId(projectId, databaseId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all database connections
         * @param {string} projectId 
         * @param {string} databaseId 
         * @param {string | null} [cursor] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectsByProjectIdDatabasesByDatabaseIdConnections(projectId: string, databaseId: string, cursor?: string | null, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getProjectsByProjectIdDatabasesByDatabaseIdConnections(projectId, databaseId, cursor, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new project
         * @param {PostProjectsRequest} [postProjectsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProjects(postProjectsRequest?: PostProjectsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetProjects200ResponseDataInner> {
            return localVarFp.postProjects(postProjectsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new database for a project
         * @param {string} id 
         * @param {PostProjectsRequest} [postProjectsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProjectsByIdDatabases(id: string, postProjectsRequest?: PostProjectsRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostProjectsByIdDatabases201Response> {
            return localVarFp.postProjectsByIdDatabases(id, postProjectsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Transfer a project to a new owner\'s workspace
         * @param {string} id 
         * @param {PostProjectsByIdTransferRequest} [postProjectsByIdTransferRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProjectsByIdTransfer(id: string, postProjectsByIdTransferRequest?: PostProjectsByIdTransferRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetProjects200ResponseDataInner> {
            return localVarFp.postProjectsByIdTransfer(id, postProjectsByIdTransferRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new database connection string.
         * @param {string} projectId 
         * @param {string} databaseId 
         * @param {PostProjectsByProjectIdDatabasesByDatabaseIdConnectionsRequest} [postProjectsByProjectIdDatabasesByDatabaseIdConnectionsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProjectsByProjectIdDatabasesByDatabaseIdConnections(projectId: string, databaseId: string, postProjectsByProjectIdDatabasesByDatabaseIdConnectionsRequest?: PostProjectsByProjectIdDatabasesByDatabaseIdConnectionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostProjectsByIdDatabases201ResponseApiKeysInner> {
            return localVarFp.postProjectsByProjectIdDatabasesByDatabaseIdConnections(projectId, databaseId, postProjectsByProjectIdDatabasesByDatabaseIdConnectionsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Deletes a project
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteProjectsById(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteProjectsById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a database
     * @param {string} projectId 
     * @param {string} databaseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteProjectsByProjectIdDatabasesByDatabaseId(projectId: string, databaseId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteProjectsByProjectIdDatabasesByDatabaseId(projectId, databaseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a database connection string.
     * @param {string} projectId 
     * @param {string} databaseId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteProjectsByProjectIdDatabasesByDatabaseIdConnectionsById(projectId: string, databaseId: string, id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteProjectsByProjectIdDatabasesByDatabaseIdConnectionsById(projectId, databaseId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all projects
     * @param {string | null} [cursor] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProjects(cursor?: string | null, limit?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProjects(cursor, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a project
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProjectsById(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProjectsById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all databases for a project
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProjectsByIdDatabases(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProjectsByIdDatabases(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a database
     * @param {string} projectId 
     * @param {string} databaseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProjectsByProjectIdDatabasesByDatabaseId(projectId: string, databaseId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProjectsByProjectIdDatabasesByDatabaseId(projectId, databaseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all database connections
     * @param {string} projectId 
     * @param {string} databaseId 
     * @param {string | null} [cursor] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProjectsByProjectIdDatabasesByDatabaseIdConnections(projectId: string, databaseId: string, cursor?: string | null, limit?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProjectsByProjectIdDatabasesByDatabaseIdConnections(projectId, databaseId, cursor, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new project
     * @param {PostProjectsRequest} [postProjectsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postProjects(postProjectsRequest?: PostProjectsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postProjects(postProjectsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new database for a project
     * @param {string} id 
     * @param {PostProjectsRequest} [postProjectsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postProjectsByIdDatabases(id: string, postProjectsRequest?: PostProjectsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postProjectsByIdDatabases(id, postProjectsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Transfer a project to a new owner\'s workspace
     * @param {string} id 
     * @param {PostProjectsByIdTransferRequest} [postProjectsByIdTransferRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postProjectsByIdTransfer(id: string, postProjectsByIdTransferRequest?: PostProjectsByIdTransferRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postProjectsByIdTransfer(id, postProjectsByIdTransferRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new database connection string.
     * @param {string} projectId 
     * @param {string} databaseId 
     * @param {PostProjectsByProjectIdDatabasesByDatabaseIdConnectionsRequest} [postProjectsByProjectIdDatabasesByDatabaseIdConnectionsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postProjectsByProjectIdDatabasesByDatabaseIdConnections(projectId: string, databaseId: string, postProjectsByProjectIdDatabasesByDatabaseIdConnectionsRequest?: PostProjectsByProjectIdDatabasesByDatabaseIdConnectionsRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postProjectsByProjectIdDatabasesByDatabaseIdConnections(projectId, databaseId, postProjectsByProjectIdDatabasesByDatabaseIdConnectionsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



