{
  "primitiveTypes": [
    {
      "label": "String",
      "documentation": "Variable length text"
    },
    {
      "label": "Boolean",
      "documentation": "True or false value"
    },
    {
      "label": "Int",
      "documentation": "Integer value"
    },
    {
      "label": "Float",
      "documentation": "Floating point number"
    },
    {
      "label": "DateTime",
      "documentation": "Timestamp"
    },
    {
      "label": "Json",
      "documentation": "A JSON object"
    },
    {
      "label": "Bytes",
      "documentation": ""
    },
    {
      "label": "Decimal",
      "documentation": "Decimal value"
    },
    {
      "label": "BigInt",
      "documentation": "Integer values that may be greater than 2^53"
    },
    {
      "label": "Unsupported(\"\")",
      "documentation": "An arbitrary database column type, for which Prisma has no syntax. Fields of type `Unsupported` work with Prisma Migrate and introspection, but are not exposed in Prisma Client.",
      "fullSignature": "Unsupported(_ name: String)",
      "params": [
        {
          "label": "name",
          "documentation": "Name of the column type as expected by the underlying database, e.g. Unsupported(\"GEOGRAPHY(POINT,4326)\"). This string is not validated by Prisma Migrate and will be used by Prisma Migrate to generate the DDL statements to evolve the database schema. Prisma Introspect will overwrite this when re-introspecting if the type does not match."
        }
      ]
    }
  ],
  "blockTypes": [
    {
      "label": "datasource",
      "documentation": "The datasource block tells the schema where the models are backed."
    },
    {
      "label": "generator",
      "documentation": "Generator blocks configure which clients are generated and how they're generated. Language preferences and binary configuration will go in here."
    },
    {
      "label": "model",
      "documentation": "Models represent the entities of your application domain. They are defined using model blocks in the data model."
    },
    {
      "label": "enum",
      "documentation": "Enums are defined via the enum block. You can define enums in your data model if they're supported by the data source you use:\n• PostgreSQL: Supported\n• MySQL: Supported\n• MariaDB: Supported\n• SQLite: Not supported"
    }
  ],
  "dataSourceFields": [
    {
      "label": "provider",
      "documentation": "Describes which data source connector to use. Can be one of the following built in datasource providers: `postgresql`, `mysql` or `sqlite`."
    },
    {
      "label": "url",
      "documentation": "Connection URL including authentication info. Each datasource provider documents the URL syntax. Most providers use the syntax provided by the database, [learn more](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-schema)."
    },
    {
      "label": "shadowDatabaseUrl",
      "documentation": "Connection URL including authentication info to use for Migrate's [shadow database](https://www.prisma.io/docs/concepts/components/prisma-migrate#shadow-database). Each datasource provider documents the URL syntax. Most providers use the syntax provided by the database."
    }
  ],
  "generatorFields": [
    {
      "label": "provider",
      "documentation": "Describes which generator to use. This can point to a file that implements a generator or specify a built-in generator directly."
    },
    {
      "label": "output",
      "documentation": "Determines the location for the generated client, [learn more](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-schema)"
    },
    {
      "label": "binaryTargets",
      "documentation": "Specifies the OS on which the Prisma Client will run to ensure binary compatibility of the query engine."
    },
    {
      "label": "previewFeatures",
      "documentation": "Enables preview feature flags."
    }
  ],
  "blockAttributes": [
    {
      "label": "@@map(\"\")",
      "documentation": "Maps a model name from the Prisma schema to a different table name.",
      "fullSignature": "@@map(_ name: String)",
      "params": [
        {
          "label": "name",
          "documentation": "The name of the target database table."
        }
      ]
    },
    {
      "label": "@@id([])",
      "documentation": "Defines a multi-field ID on the model.",
      "fullSignature": "@@id(_ fields: FieldReference[])",
      "params": [
        {
          "label": "fields",
          "documentation": "A list of references."
        }
      ]
    },
    {
      "label": "@@unique([])",
      "documentation": "Defines a compound unique constraint for the specified fields.",
      "fullSignature": "@@unique(_ fields: FieldReference[])",
      "params": [
        {
          "label": "fields",
          "documentation": "A list of references."
        }
      ]
    },
    {
      "label": "@@index([])",
      "documentation": "Defines an index on the model.",
      "fullSignature": "@@index(_ fields: FieldReference[])",
      "params": [
        {
          "label": "fields",
          "documentation": "A list of references."
        }
      ]
    },
    {
      "label": "@@ignore",
      "documentation": "A model with an `@@ignore` attribute can be kept in sync with the database schema using Prisma Migrate and Introspection, but won't be exposed in Prisma Client.",
      "fullSignature": "@@ignore",
      "params": []
    }
  ],
  "fieldAttributes": [
    {
      "label": "@id",
      "fullSignature": "@id",
      "documentation": "Defines a single-field ID on the model.",
      "params": []
    },
    {
      "label": "@unique",
      "fullSignature": "@unique",
      "documentation": "Defines a unique constraint for this field.",
      "params": []
    },
    {
      "label": "@map(\"\")",
      "documentation": "Maps a field name from the Prisma schema to a different column name.",
      "fullSignature": "@map(_ name: String)",
      "params": [
        {
          "label": "name",
          "documentation": "The name of the target database column."
        }
      ]
    },
    {
      "label": "@default()",
      "documentation": "Defines a default value for this field. `@default` takes an expression as an argument.",
      "fullSignature": "@default(_ expression: Expression)",
      "params": [
        {
          "label": "expression",
          "documentation": "An expression (e.g. `5`, `true`, `now()`)."
        }
      ]
    },
    {
      "label": "@relation()",
      "documentation": "Defines meta information about the relation. [Learn more](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-schema/relations#the-relation-attribute).",
      "fullSignature": "@relation(_ name: String?, fields: FieldReference[]?, references: FieldReference[]?)",
      "params": [
        {
          "label": "name",
          "documentation": "Defines the name of the relationship. In an m-n-relation, it also determines the name of the underlying relation table."
        },
        {
          "label": "fields",
          "documentation": "A list of field references of the *current* model."
        },
        {
          "label": "references",
          "documentation": "A list of field references of the model on *the other side of the relation*."
        },
        {
          "label": "onDelete",
          "documentation": "Specifies the action to perform when a referenced entry in the referenced model is being deleted."
        },
        {
          "label": "onUpdate",
          "documentation": "Specifies the action to perform when a referenced field in the referenced model is being updated to a new value."
        }
      ]
    },
    {
      "label": "@updatedAt",
      "fullSignature": "@updatedAt",
      "documentation": "Automatically stores the time when a record was last updated.",
      "params": []
    },
    {
      "label": "@ignore",
      "fullSignature": "@ignore",
      "documentation": "A field with an `@ignore` attribute can be kept in sync with the database schema using Prisma Migrate and Introspection, but won't be exposed in Prisma Client.",
      "params": []
    }
  ],
  "relationArguments": [
    {
      "label": "references: []",
      "fullSignature": "references: []",
      "documentation": "A list of field references of the model on *the other side of the relation*.",
      "params": []
    },
    {
      "label": "fields: []",
      "fullSignature": "fields: []",
      "documentation": "A list of field references of the *current* model.",
      "params": []
    },
    {
      "label": "onDelete: ",
      "fullSignature": "onDelete: ",
      "documentation": "Specifies the action to perform when a referenced entry in the referenced model is being deleted.",
      "params": []
    },
    {
      "label": "onUpdate: ",
      "fullSignature": "onUpdate: ",
      "documentation": "Specifies the action to perform when a referenced field in the referenced model is being updated to a new value.",
      "params": []
    },
    {
      "label": "\"\"",
      "fullSignature": "\"\"",
      "documentation": "Defines the name of the relationship. In an m-n-relation, it also determines the name of the underlying relation table.",
      "params": []
    }
  ],
  "datasourceUrlArguments": [
    {
      "label": "\"\"",
      "fullSignature": "\"\"",
      "documentation": "Connection URL including authentication info. Each datasource provider documents the URL syntax. Most providers use the syntax provided by the database, [learn more](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-schema).",
      "params": []
    },
    {
      "label": "env()",
      "fullSignature": "env(_ environmentVariable: string)",
      "documentation": "Specifies a data source via an environment variable. When running a Prisma CLI command that needs the database connection URL (e.g. `prisma generate`), you need to make sure that the `DATABASE_URL` environment variable is set. One way to do so is by creating a `.env` file. Note that the file must be in the same directory as your schema.prisma file to automatically be picked up by the Prisma CLI.",
      "params": [
        {
          "label": "environmentVariable",
          "documentation": "The environment variable in which the database connection URL is stored."
        }
      ]
    }
  ],
  "generatorProviders": [
    {
      "label": "prisma-client-js",
      "documentation": "Built-in generator."
    }
  ],
  "generatorProviderArguments": [
    {
      "label": "\"\"",
      "documentation": "Specifies a single provider."
    }
  ],
  "datasourceProviders": [
    {
      "label": "mysql",
      "documentation": "Specifies a MySQL data source. Learn more about the MySQL data source connector [here](https://www.prisma.io/docs/reference/database-connectors/mysql)."
    },
    {
      "label": "postgresql",
      "documentation": "Specifies a PostGreSQL data source. Learn more about the PostgreSQL data source connector [here](https://www.prisma.io/docs/reference/database-connectors/postgresql)."
    },
    {
      "label": "sqlite",
      "documentation": "Specifies a SQLite data source. Learn more about the SQLite data source connector [here](https://www.prisma.io/docs/reference/database-connectors/sqlite)."
    },
    {
      "label": "sqlserver",
      "documentation": "Specifies a Microsoft SQL Server data source. Learn more about this connector [here](https://pris.ly/d/mssql-connector)"
    }
  ],
  "datasourceProviderArguments": [
    {
      "label": "[]",
      "documentation": "Specifies multiple providers."
    },
    {
      "label": "\"\"",
      "documentation": "Specifies a single provider."
    }
  ],
  "previewFeaturesArguments": [
    {
      "label": "[]",
      "documentation": "Enables preview feature flags."
    },
    {
      "label": "\"\"",
      "documentation": "Enables a preview feature flag."
    }
  ]
}
